BROKER SCHEMA BANCO_UTILITIES

CREATE PROCEDURE IDENTIFY_FRB_WIRE_REJECT_FLAG (IN MESSAGE CHAR, OUT FLAG BOOLEAN)

BEGIN
	SET FLAG = FALSE;
	-- FTA811 is the rejected wire message type coming back from FRB
	IF  POSITION ('FTA811' IN MESSAGE) > 0 THEN 
		SET FLAG = TRUE ;
	END IF ;
		
END;



CREATE PROCEDURE IDENTIFY_WIRE_FLAG (IN MESSAGE CHAR, OUT FLAG BOOLEAN)

BEGIN
	SET FLAG = FALSE;
	
	IF  POSITION ('FTI0811' IN MESSAGE) > 0 THEN 
		SET FLAG = TRUE ;
	ELSEIF POSITION ('FTF811' IN MESSAGE) > 0 THEN
		SET FLAG= TRUE ; 
	ELSEIF POSITION ('FTIR012' IN MESSAGE) > 0 THEN
		SET FLAG= TRUE ; 
	
	ELSEIF POSITION ('FTFR12' IN MESSAGE) > 0 THEN
		SET FLAG= TRUE ; 
	
	ELSEIF POSITION ('FTIR811' IN MESSAGE) > 0 THEN
		SET FLAG= TRUE ; 
	
	ELSEIF POSITION ('FTR811' IN MESSAGE) > 0 THEN
		SET FLAG= TRUE ; 
				
	END IF ;
	
		
	
END;



CREATE PROCEDURE AMOUNT_FORMATTER ( IN AMOUNT_STRING CHARACTER , OUT FORMATTED_AMOUNT_STRING CHAR) 
	BEGIN 
		DECLARE AMOUNT_STRING_LENGTH INTEGER LENGTH(AMOUNT_STRING);
		DECLARE SUB_STRING_1, SUB_STRING_2 CHARACTER;
		SET SUB_STRING_1 = SUBSTRING(AMOUNT_STRING FROM 1 FOR (AMOUNT_STRING_LENGTH - 2));
		SET SUB_STRING_1 = TRIM(LEADING '0' FROM SUB_STRING_1);
		SET SUB_STRING_2 = SUBSTRING(AMOUNT_STRING FROM (AMOUNT_STRING_LENGTH-1) FOR 2);
		
		SET FORMATTED_AMOUNT_STRING = SUB_STRING_1 || '.' || SUB_STRING_2 ;
	END;
	
	
CREATE PROCEDURE GET_CODE_VALUE_FROM_WIRE ( IN MESSAGE CHARACTER,IN CODE CHAR , IN END_IDENTIFIER CHAR , OUT DESCRIPTION CHAR) 
	BEGIN
		DECLARE START_IDENTIFIER CHAR ; 
		SET DESCRIPTION = '';
		SET START_IDENTIFIER='{' || CODE || '}';
		SET DESCRIPTION= SUBSTRING( SUBSTRING(MESSAGE AFTER START_IDENTIFIER) BEFORE END_IDENTIFIER);
		IF DESCRIPTION = '' THEN 
			SET DESCRIPTION = NULL ;
		END IF ;
			
	END;
	
	
CREATE PROCEDURE GET_STATUS_CODE_DESCRIPTION (IN MYREF REFERENCE, IN ID INTEGER , OUT STATUS CHARACTER , OUT DESCRIPTION CHARACTER )
BEGIN
	
	SET STATUS='';
	SET DESCRIPTION='';
	
	WHILE LASTMOVE(MYREF)=TRUE DO
			IF MYREF.ID = ID THEN
				SET STATUS = MYREF.Status ;
				SET DESCRIPTION = MYREF.Description;
			END IF ;		
			MOVE MYREF NEXTSIBLING;
	END WHILE ;
END;	

CREATE PROCEDURE GET_FED_PROPERTY_VALUE (IN MYREF REFERENCE, IN PROP CHARACTER , OUT VALUE CHARACTER )
BEGIN
	
	SET VALUE='';
	WHILE LASTMOVE(MYREF)=TRUE DO
			IF MYREF.Property = PROP THEN
				SET VALUE = MYREF.Value;
			END IF ;		
			MOVE MYREF NEXTSIBLING;
	END WHILE ;
END;	


CREATE PROCEDURE GET_PARSED_WIRE_MESSAGE  ( IN RAW_MESSAGE CHAR, IN RAW_AMOUNT CHARACTER ,IN PARSED_AMOUNT CHARACTER , IN MYREF REFERENCE  , OUT PARSED_MESSAGE CHAR )
BEGIN
		DECLARE CRLF CHAR CAST(X'0D0A' AS CHAR CCSID 1208);
		DECLARE POS INTEGER;
		SET PARSED_MESSAGE = RAW_MESSAGE ;
		SET PARSED_MESSAGE = REPLACE(PARSED_MESSAGE, RAW_AMOUNT , '$'||PARSED_AMOUNT);
		SET PARSED_MESSAGE = REPLACE(PARSED_MESSAGE,'{',CRLF || CRLF || '{');
		SET PARSED_MESSAGE = REPLACE(PARSED_MESSAGE,'*',CRLF);
		
		WHILE LASTMOVE(MYREF)=TRUE DO
			-- adding if condition as the cache has other values apart from WIRECODES	
			IF MYREF.WireCode IS NOT NULL THEN	
				SET PARSED_MESSAGE = REPLACE(PARSED_MESSAGE,'{'||MYREF.WireCode||'}', '{'||MYREF.WireCode||'} : '||MYREF.Description||': ');		 
			END IF ;
			MOVE MYREF NEXTSIBLING;
		END WHILE ;
		SET POS = POSITION('{' IN PARSED_MESSAGE);
		SET PARSED_MESSAGE = SUBSTRING(PARSED_MESSAGE FROM POS);
		-- Added below line after observing space in the DB entries on 09/19/2018
		SET PARSED_MESSAGE = TRIM(PARSED_MESSAGE);
		
END;
	
	
CREATE PROCEDURE SPLIT_STRING (IN S CHARACTER, IN Env REFERENCE, IN Delim CHARACTER) 
BEGIN 
   DECLARE P INTEGER; 
   DECLARE Idx INTEGER 1; 
   
   -- fixing the whitespaces received in ack message 
   SET S = TRIM(S);

   SET Env.Split = NULL; 
    
   REPEAT 
      SET P = POSITION(Delim IN S); 
      IF P = 0 THEN 
         SET Env.Split.Array[Idx] = S; 
      ELSE 
         SET Env.Split.Array[Idx] = LEFT(S, P - 1); 
         SET S = SUBSTRING(S FROM P + LENGTH(Delim)); 
         SET Idx = Idx + 1; 
      END IF; 
   UNTIL P = 0 
       
   END REPEAT;    

END; 


CREATE PROCEDURE GET_IMAD_FROM_ACK_MESSAGE (IN MSG CHARACTER, OUT IMAD CHARACTER )
BEGIN
	
	DECLARE TOKENS ROW;
	CALL SPLIT_STRING(MSG,TOKENS,' ');
	SET IMAD = TOKENS.Split.Array[<2];
	SET IMAD = SUBSTRING (IMAD FROM 1 FOR 18);
		
END;

CREATE PROCEDURE GET_OMAD_FROM_ACK_MESSAGE (IN MSG CHARACTER, OUT OMAD CHARACTER )
BEGIN
	
	DECLARE TOKENS ROW;
	CALL SPLIT_STRING(MSG,TOKENS,' ');
	SET OMAD = TOKENS.Split.Array[<1];
	SET OMAD = SUBSTRING (OMAD FROM 1 FOR 30);
		
END;




CREATE COMPUTE MODULE UTILITIES_LIB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
/*	
=========================================================================================== 
PROCEDURE SPLIT_STRING 
======================================================================================== 
Splits S on Delim into an array in Env (Environment.Split.Array[]) 
Removes Environment.Split before refilling it 
*/ 
	
END MODULE;
