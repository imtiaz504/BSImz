BROKER SCHEMA WIRE.FRB.TO.FEDLINK.INCOMING.STATEMENT

PATH BANCO_UTILITIES ;
DECLARE CACHE SHARED ROW;

CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;



CREATE COMPUTE MODULE WIRE_FRB_TO_FEDLINK_INCOMING_STATEMENT_ESQL_PROCESS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		DECLARE WIRE_STMT_BLOB BLOB;
		DECLARE WIRE_STMT_MESSAGE,TRANSACTION_UUID,DIR,FILE CHARACTER;
		
		SET TRANSACTION_UUID = UUIDASCHAR;	
		SET WIRE_STMT_BLOB = InputRoot.BLOB.BLOB ; 
		SET WIRE_STMT_MESSAGE = CAST( WIRE_STMT_BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId Encoding InputRoot.Properties.Encoding);
		
		CALL INITIALIZECACHE();	
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'FED_STATEMENT_OUTPUT_FOLDER',DIR);
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'FED_STATEMENT_OUTPUT_FILE',FILE);
		
		INSERT INTO Database.dbo.FEDStatements ( ID,Message,DateCreated)
			 VALUES (TRANSACTION_UUID,WIRE_STMT_MESSAGE,CAST(CURRENT_TIMESTAMP as TIMESTAMP));
		SET OutputRoot.BLOB.BLOB = WIRE_STMT_BLOB ;
		
		PROPAGATE TO TERMINAL 'out2';
			
		IF CONTAINS(WIRE_STMT_MESSAGE,'GIF100') THEN
			SET InputLocalEnvironment.Destination.File.Directory = DIR; 
			SET InputLocalEnvironment.Destination.File.Name = FILE ;	
			SET OutputRoot.BLOB.BLOB = WIRE_STMT_BLOB ;
			PROPAGATE TO TERMINAL 'out1';
		END IF ;
		
		-- terminals connected to perform statement reconcile
		SET OutputRoot.BLOB.BLOB = WIRE_STMT_BLOB ;
		PROPAGATE TO TERMINAL 'out';
		
		RETURN FALSE;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
