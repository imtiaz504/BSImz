BROKER SCHEMA COM.WIRE.FEDLINK.TO.T24.INCOMING.POSTPROCESSOR.REPROCESS
PATH BANCO_UTILITIES;
DECLARE ns NAMESPACE 'http://www.temenos.com/T24/OFSML/140';

DECLARE CACHE SHARED ROW;
DECLARE SUCCESS_CODE EXTERNAL INTEGER 2006;

CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;



CREATE COMPUTE MODULE WIRE_FEDLINK_TO_T24_INCOMING_POSTPROCESSOR_REPROCESS_ESQL_PROCESS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS CHARACTER ;
		DECLARE REFERENCE_ID CHARACTER;
		DECLARE TRANSACTION_UUID_BLOB,T24_XML_BLOB,FEDLINK_XML_BLOB,TRANSACTION_ID_BLOB BLOB ;
		DECLARE IMAD,OMAD,TRANSACTION_UUID CHARACTER;
		DECLARE FEDLINK_XML_MESSAGE,T24_XML_MESSAGE,T24_POST_STRING CHARACTER;
		DECLARE TRANSACTION_IDS ROW ;
		DECLARE  IMAD_REF , OMAD_REF ROW;
		--DECLARE FUNDS_TRANSFER_REF REFERENCE TO InputRoot.XMLNSC.ns:FUNDSTRANSFERFEDLINKOFSSEEResponse.FUNDSTRANSFER;
		
		CALL INITIALIZECACHE();
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],SUCCESS_CODE,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS);
		
		/*
		SET TRANSACTION_STATUS_SUCCESS = 'T24 successfully updated';
		SET TRANSACTION_DESCRIPTION_SUCCESS = 'T24 successfully updated the advice but at reprocessing not in the first attempt';
		*/
		
		SET T24_XML_BLOB = ASBITSTREAM(InputRoot.XMLNSC.ns:T24,InputRoot.Properties.Encoding,
									  InputRoot.Properties.CodedCharSetId,'','','',FolderBitStream);
		SET T24_XML_MESSAGE = CAST (T24_XML_BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.MQMD.Encoding);
		
		
		IF EXISTS(InputRoot.XMLNSC.ns:T24.ns:serviceResponse.ns:ofsTransactionProcessed[]) THEN
			
			SET REFERENCE_ID= InputRoot.XMLNSC.ns:T24.ns:serviceResponse.ns:ofsTransactionProcessed.ns:transactionId;
			SET IMAD_REF.IMADS[] = SELECT C FROM InputRoot.XMLNSC.ns:T24.ns:serviceResponse.ns:ofsTransactionProcessed.ns:field[]  AS C WHERE C.name='IMAD.REFERENCE' ;
			SET OMAD_REF.OMADS[] = SELECT C FROM InputRoot.XMLNSC.ns:T24.ns:serviceResponse.ns:ofsTransactionProcessed.ns:field[]  AS C WHERE C.name='OMAD.REFERENCE';	
			SET IMAD = IMAD_REF.IMADS[1];
			SET OMAD = OMAD_REF.OMADS[1];
		
			
			SET TRANSACTION_IDS.TRANSACTION  = THE (SELECT A.ID  FROM Database.dbo.FEDAdvice AS A WHERE A.IMAD = IMAD AND A.OMAD = OMAD AND A.DuplicateWireFlag = FALSE);
			SET TRANSACTION_ID_BLOB = TRANSACTION_IDS.TRANSACTION[1].ID;
			
			IF TRANSACTION_ID_BLOB IS NOT NULL THEN
				UPDATE Database.dbo.FEDAdvice AS SP SET ReferenceID=REFERENCE_ID, T24ConfirmXMLMessage= T24_XML_MESSAGE , Status = TRANSACTION_DESCRIPTION_SUCCESS , Description = TRANSACTION_DESCRIPTION_SUCCESS WHERE SP.ID = TRANSACTION_ID_BLOB;
				
			ELSE
				-- rare condition to be filed in exceptions table 
				SET TRANSACTION_UUID = UUIDASCHAR;
				INSERT INTO Database.dbo.FEDExceptions (ID,Message,Reason,DateCreated )
				 VALUES (TRANSACTION_UUID,T24_XML_MESSAGE,'Incoming Wire Response received at reprocess from T24 couldnt be matched in FedAdvice database',CAST(CURRENT_TIMESTAMP as TIMESTAMP) );
				 
			END IF ;
				
		
			
		ELSE
			SET TRANSACTION_UUID=UUIDASCHAR;
			INSERT INTO Database.dbo.FEDExceptions (ID,Message,Reason,DateCreated )
				 VALUES (TRANSACTION_UUID,T24_XML_MESSAGE,'Incoming Wire Response from reprocess doesnt contain required elements',CAST(CURRENT_TIMESTAMP as TIMESTAMP) );
				
			 
		END IF ;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
