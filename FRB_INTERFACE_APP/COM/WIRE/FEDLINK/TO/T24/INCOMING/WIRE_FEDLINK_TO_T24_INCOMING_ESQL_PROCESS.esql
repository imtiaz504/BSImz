BROKER SCHEMA COM.WIRE.FEDLINK.TO.T24.INCOMING

PATH BANCO_UTILITIES;
DECLARE ns NAMESPACE 'http://www.temenos.com/T24/OFSML/140';
--DECLARE ns NAMESPACE 'http://www.temenos.com/T24/ofs/Request';

DECLARE CACHE SHARED ROW;
DECLARE INITIAL_CODE EXTERNAL INTEGER 2003;
DECLARE FINAL_CODE EXTERNAL INTEGER 2004;

CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;

CREATE COMPUTE MODULE WIRE_FEDLINK_TO_T24_INCOMING_ESQL_PROCESS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS CHARACTER ;
		DECLARE TRANSACTION_UUID,TRANSACTION_EXCEPION_UUID,REFERENCE_ID,PARSED_AMOUNT,RAW_AMOUNT,BENEFICIARY,SELECT_QRY,INSERT_QRY,PARSED_MESSAGE CHARACTER;
		DECLARE WIRE_BLOB,TRANSACTION_ID_BLOB,T24_XML_BLOB BLOB;
		DECLARE IMAD,OMAD,WIRE_MESSAGE,DUMMY,T24_XML_MESSAGE,TRIMMED_WIRE_MESSAGE CHARACTER;
		DECLARE TRANSACTION_IDS ROW ;
		DECLARE RECOGNIZED_WIRE_FLAG BOOLEAN ;
		DECLARE POS INTEGER; 
		
		CALL INITIALIZECACHE();
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],INITIAL_CODE,TRANSACTION_STATUS,TRANSACTION_DESCRIPTION);
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],FINAL_CODE,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS);
		
		/*	
		SET TRANSACTION_STATUS = 'PICKED FROM FEDLINK';
		SET TRANSACTION_DESCRIPTION= 'INCOMING WIRE IS PICKED FROM FEDLINK';
		SET TRANSACTION_STATUS_SUCCESS = 'POSTED TO T24' ;
		SET TRANSACTION_DESCRIPTION_SUCCESS = 'INCOMING WIRE IS SUCCESSFULLY SENT TO T24'; 
		*/
		SET WIRE_BLOB = InputRoot.BLOB.BLOB ; 
		SET WIRE_MESSAGE = CAST( WIRE_BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId Encoding InputRoot.Properties.Encoding);
		SET POS = POSITION('{' IN WIRE_MESSAGE);
		SET TRIMMED_WIRE_MESSAGE = SUBSTRING(WIRE_MESSAGE FROM POS);
		SET TRIMMED_WIRE_MESSAGE = TRIM (TRIMMED_WIRE_MESSAGE); 
		
		-- Retrieving / generating the required values from the wire message 
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'3320','*{',REFERENCE_ID);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'2000','{',RAW_AMOUNT);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'4200','{',BENEFICIARY);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1520','{',IMAD);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1120','{',OMAD);
		CALL AMOUNT_FORMATTER(RAW_AMOUNT, PARSED_AMOUNT);
		
		CALL GET_PARSED_WIRE_MESSAGE(WIRE_MESSAGE ,RAW_AMOUNT,PARSED_AMOUNT, CACHE.WIRECODES[1] , PARSED_MESSAGE);
		
		-- Set the outputroot with the wire message in the xml
		
		DECLARE USER,APPLICATION,VERSION,NAME CHARACTER;
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'T24_SERVICE_REQUEST_OFS_TRAN_INPUT_USER',USER);
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'T24_SERVICE_REQUEST_OFS_TRAN_INPUT_APPLICATION',APPLICATION);
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'T24_SERVICE_REQUEST_OFS_TRAN_INPUT_VERSION',VERSION);
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'T24_SERVICE_REQUEST_OFS_TRAN_INPUT_NAME',NAME);
		
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:securityContext.ns:userName=USER;
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:ofsTransactionInput.(XMLNSC.Attribute)application=APPLICATION;
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:ofsTransactionInput.(XMLNSC.Attribute)version=VERSION;
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:ofsTransactionInput.ns:field.(XMLNSC.Attribute)name=NAME;
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:ofsTransactionInput.ns:field=WIRE_MESSAGE;
		
		
		SET T24_XML_BLOB = ASBITSTREAM(OutputRoot.XMLNSC.ns:T24,OutputRoot.Properties.Encoding,
									  OutputRoot.Properties.CodedCharSetId,'','','',FolderBitStream);
		SET T24_XML_MESSAGE = CAST (T24_XML_BLOB AS CHAR CCSID OutputRoot.Properties.CodedCharSetId ENCODING OutputRoot.MQMD.Encoding);
		
		
		SET TRANSACTION_UUID = NULL ;
		-- business rules / error handling --
		DECLARE OMAD_LEN INTEGER LENGTH(OMAD) ; 
		DECLARE IMAD_LEN INTEGER LENGTH(IMAD) ; 
		
		
		IF OMAD_LEN > 0 AND IMAD_LEN > 0 THEN 
			SET TRANSACTION_IDS.TRANSACTION  = THE (SELECT A.ID  FROM Database.dbo.FEDAdvice AS A WHERE A.IMAD = IMAD AND A.OMAD = OMAD AND A.DuplicateWireFlag = FALSE);
			SET TRANSACTION_ID_BLOB = TRANSACTION_IDS.TRANSACTION[1].ID;
		END IF ;
		
		
		IF TRANSACTION_ID_BLOB IS NOT NULL THEN
			-- able to find the match for this wire in the fedadvice table update the record 
			UPDATE Database.dbo.FEDAdvice AS SP SET WireMessage =WIRE_MESSAGE, T24ConfirmXMLMessage= T24_XML_MESSAGE , ParsedWireMessage = PARSED_MESSAGE , Status = TRANSACTION_STATUS , Description = TRANSACTION_DESCRIPTION WHERE SP.ID = TRANSACTION_ID_BLOB;
			
			UPDATE Database.dbo.FEDAdvice AS SP SET Status = TRANSACTION_STATUS_SUCCESS , Description = TRANSACTION_DESCRIPTION_SUCCESS WHERE SP.ID = TRANSACTION_ID_BLOB;
		
			
		ELSE
			SET TRANSACTION_UUID = UUIDASCHAR;
			
			INSERT INTO Database.dbo.FEDExceptions (ID,Message,Reason,DateCreated) 
				VALUES ( TRANSACTION_UUID,WIRE_MESSAGE,'Incoming Advice from Fedlink cannot be found in database',CAST(CURRENT_TIMESTAMP as TIMESTAMP)); 
			
		
		END IF;
		
			
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
