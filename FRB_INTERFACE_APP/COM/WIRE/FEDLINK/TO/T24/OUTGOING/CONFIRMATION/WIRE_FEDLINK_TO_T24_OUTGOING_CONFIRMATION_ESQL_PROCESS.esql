BROKER SCHEMA COM.WIRE.FEDLINK.TO.T24.OUTGOING.CONFIRMATION

PATH BANCO_UTILITIES;
DECLARE ns NAMESPACE 'http://www.temenos.com/T24/OFSML/140';

DECLARE CACHE SHARED ROW;
DECLARE INITIAL_CODE EXTERNAL INTEGER 1007;
DECLARE FINAL_CODE EXTERNAL INTEGER 1008;


CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;



CREATE COMPUTE MODULE WIRE_FEDLINK_TO_T24_OUTGOING_CONFIRMATION_ESQL_PROCESS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS CHARACTER ;
		DECLARE REFERENCE_ID CHARACTER;
		DECLARE TRANSACTION_UUID_BLOB,T24_XML_BLOB,FEDLINK_XML_BLOB BLOB ;
		DECLARE IMAD,OMAD,TRANSACTION_UUID CHARACTER;
		DECLARE FEDLINK_XML_MESSAGE,T24_XML_MESSAGE,T24_POST_STRING CHARACTER;
		DECLARE TRANSACTION_IDS ROW ;
		
		CALL INITIALIZECACHE();
		
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],INITIAL_CODE,TRANSACTION_STATUS,TRANSACTION_DESCRIPTION);
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],FINAL_CODE,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS);
		
		/*
		SET TRANSACTION_STATUS = 'PICKED ACK FROM FEDLINK';
		SET TRANSACTION_DESCRIPTION= 'OUTGOING WIRE ACKNOWLEDGEMENT IS PICKED FROM FEDLINK QUEUE';
		SET TRANSACTION_STATUS_SUCCESS = 'POSTED ACK TO T24' ;
		SET TRANSACTION_DESCRIPTION_SUCCESS = 'OUTGOING WIRE ACKNOWLEDGMENT IS SUCCESSFULLY SENT TO T24'; 
		*/
		SET REFERENCE_ID = InputRoot.XMLNSC.FedLinkStatus.FedStatus.ReferenceNo ;
		SET IMAD = InputRoot.XMLNSC.FedLinkStatus.FedStatus.IMAD ;
		SET OMAD = InputRoot.XMLNSC.FedLinkStatus.FedStatus.OMAD ;
		
		SET T24_POST_STRING = REFERENCE_ID || ' ' || IMAD || ' ' || OMAD ;
		
		-- business rules / error handling --
		-- identifying the match using the reference id for outgoing wires
		
		SET TRANSACTION_IDS.TRANSACTION  = THE (SELECT A.ID  FROM Database.dbo.FEDOrigWire AS A WHERE A.ReferenceID = REFERENCE_ID);
		SET TRANSACTION_UUID_BLOB =  TRANSACTION_IDS.TRANSACTION[1].ID ;   
		
		
		-- setting the outputroot xml and extract the t24 xml message as string in its entirity
		
		-- setting the outputroot xml and extract the t24 xml message as string in its entirity
		DECLARE USER,PASSWORD,NAME CHARACTER;
		
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'T24_SERVICE_REQUEST_OFS_STD_ROUTINE_USER',USER);
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'T24_SERVICE_REQUEST_OFS_STD_ROUTINE_PASSWORD',PASSWORD);
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'T24_SERVICE_REQUEST_OFS_STD_ROUTINE_NAME',NAME);
		
		
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:securityContext.ns:userName=USER;
		--SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:securityContext.ns:password=PASSWORD;
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:ofsStandardRoutine.(XMLNSC.Attribute)name=NAME;
		SET OutputRoot.XMLNSC.ns:T24.ns:serviceRequest.ns:ofsStandardRoutine=T24_POST_STRING;
		--done creating the ouput xml move ahead with next processing 
		
		SET FEDLINK_XML_BLOB=ASBITSTREAM(InputRoot.XMLNSC.FedLinkStatus,InputRoot.Properties.Encoding,
										 InputRoot.Properties.CodedCharSetId,'','','',FolderBitStream);
		SET FEDLINK_XML_MESSAGE = CAST (FEDLINK_XML_BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.MQMD.Encoding);
		
		SET T24_XML_BLOB = ASBITSTREAM(OutputRoot.XMLNSC.ns:T24,OutputRoot.Properties.Encoding,
							  OutputRoot.Properties.CodedCharSetId,'','','',FolderBitStream);
		
		SET T24_XML_MESSAGE = CAST (T24_XML_BLOB AS CHAR CCSID OutputRoot.Properties.CodedCharSetId ENCODING OutputRoot.MQMD.Encoding);
		
		
		IF TRANSACTION_UUID_BLOB IS NOT NULL THEN
			UPDATE Database.dbo.FEDOrigWire AS SP SET T24XMLMessage =T24_XML_MESSAGE, FedlineAckMessage=FEDLINK_XML_MESSAGE, Status = TRANSACTION_STATUS , Description = TRANSACTION_DESCRIPTION WHERE SP.ID = TRANSACTION_UUID_BLOB ;
			
			UPDATE Database.dbo.FEDOrigWire AS SP SET  Status = TRANSACTION_STATUS_SUCCESS , Description = TRANSACTION_DESCRIPTION_SUCCESS WHERE SP.ID = TRANSACTION_UUID_BLOB ;
			
		ELSE 
			/* very rare to happen
			 */
			 SET TRANSACTION_UUID=UUIDASCHAR;
			 INSERT INTO Database.dbo.FEDOrigWireAudit (AuditID,T24XMLMessage,Status,Description,DateCreated ) 
			 VALUES ( TRANSACTION_UUID,T24_XML_MESSAGE,'Outgoing Wire Not Found','Confirmation Message received from FEDLINK doesnt match to any outgoing wires',CAST(CURRENT_TIMESTAMP as TIMESTAMP));
			
			 -- record a exception case as well 
			 SET TRANSACTION_UUID=UUIDASCHAR;
			 INSERT INTO Database.dbo.FEDExceptions (ID,Message,Reason,DateCreated) VALUES (TRANSACTION_UUID,FEDLINK_XML_MESSAGE,'Confirmation Message received from FEDLINK doesnt match to any outgoing wires',CAST(CURRENT_TIMESTAMP as TIMESTAMP));
		END IF ;
					
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
