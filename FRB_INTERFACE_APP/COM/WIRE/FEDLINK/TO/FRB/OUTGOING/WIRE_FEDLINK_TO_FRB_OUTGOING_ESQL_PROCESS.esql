BROKER SCHEMA COM.WIRE.FEDLINK.TO.FRB.OUTGOING

PATH BANCO_UTILITIES;

DECLARE CACHE SHARED ROW;
DECLARE INITIAL_CODE EXTERNAL INTEGER 1003;
DECLARE FINAL_CODE EXTERNAL INTEGER 1004;


CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;

CREATE COMPUTE MODULE WIRE_FEDLINK_TO_FRB_OUTGOING_ESQL_PROCESS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		--variabled needed in this flow 
		
		DECLARE TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS CHARACTER ;
		DECLARE REFERENCE_ID,PARSED_MESSAGE,RAW_AMOUNT,PARSED_AMOUNT CHARACTER;
		DECLARE WIRE_BLOB BLOB;
		DECLARE TRANSACTION_UUID_BLOB BLOB ;
		DECLARE IMAD,OMAD,WIRE_MESSAGE,DUMMY,TRANSACTION_UUID,BENEFICIARY CHARACTER;
		DECLARE TRANSACTION_IDS ROW ;
		DECLARE RECOGNIZED_WIRE_FLAG BOOLEAN ; 
			
		CALL INITIALIZECACHE();
		
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],INITIAL_CODE,TRANSACTION_STATUS,TRANSACTION_DESCRIPTION);
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],FINAL_CODE,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS);
		
		/*	
		SET TRANSACTION_STATUS = 'PICKED FROM FEDLINK';
		SET TRANSACTION_DESCRIPTION= 'OUTGOING WIRE IS PICKED FROM FEDLINK QUEUE';
		SET TRANSACTION_STATUS_SUCCESS = 'POSTED TO FRB' ;
		SET TRANSACTION_DESCRIPTION_SUCCESS = 'OUTGOING WIRE IS SUCCESSFULLY SENT TO FRB QUEUE'; 
		*/
		
		SET WIRE_BLOB = InputRoot.BLOB.BLOB ; 
		SET WIRE_MESSAGE = CAST( WIRE_BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId Encoding InputRoot.Properties.Encoding);
		
		CALL IDENTIFY_WIRE_FLAG(WIRE_MESSAGE, RECOGNIZED_WIRE_FLAG);
			
		IF RECOGNIZED_WIRE_FLAG THEN
		--	CALL INITIALIZECACHE();
		--SET DUMMY = CACHE.WIRECODES[1].WireCode;
		
		-- Retrieving / generating the required values from the wire message 
			CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'3320','*{',REFERENCE_ID);
			CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1520','{',IMAD);
			CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1120','{',OMAD);
			CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'2000','{',RAW_AMOUNT);
			CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'4200','{',BENEFICIARY);
			CALL AMOUNT_FORMATTER(RAW_AMOUNT, PARSED_AMOUNT);
		
			CALL GET_PARSED_WIRE_MESSAGE(WIRE_MESSAGE ,RAW_AMOUNT,PARSED_AMOUNT, CACHE.WIRECODES[1] , PARSED_MESSAGE);
		
			-- business rules / error handling --
			-- identifying the match using the reference id for outgoing wires
		
			SET TRANSACTION_IDS.TRANSACTION  = THE (SELECT A.ID  FROM Database.dbo.FEDOrigWire AS A WHERE A.ReferenceID = REFERENCE_ID);
			SET TRANSACTION_UUID_BLOB =  TRANSACTION_IDS.TRANSACTION[1].ID ;   
			
		-- persisting the values to DB 
		-- if the wire is found then update the record identified with new values and status 
			IF TRANSACTION_UUID_BLOB IS NOT NULL THEN 
			--SET TRANSACTION_UUID = UUIDASCHAR ;
				UPDATE Database.dbo.FEDOrigWire AS SP SET IMAD = IMAD , OMAD = OMAD , WireMessage = WIRE_MESSAGE, ParsedWireMessage = PARSED_MESSAGE, Status = TRANSACTION_STATUS , Description = TRANSACTION_DESCRIPTION WHERE SP.ID = TRANSACTION_UUID_BLOB ;
				SET OutputRoot.BLOB.BLOB = WIRE_BLOB ;
				UPDATE Database.dbo.FEDOrigWire AS SP SET Status = TRANSACTION_STATUS_SUCCESS , Description = TRANSACTION_DESCRIPTION_SUCCESS WHERE SP.ID = TRANSACTION_UUID_BLOB ;
			
			-- this is a rare scenario to happen but as per current discussion this message needs to be created as new wire in the FEDOrigWire table 
			-- and also to be sent to exceptions table for creating alerts later 
			-- 
			ELSE
				SET TRANSACTION_UUID=UUIDASCHAR; 
				INSERT INTO Database.dbo.FEDOrigWire (ID,ReferenceID,IMAD,OMAD,Beneficiary,Amount,DateCreated,Status,Description,WireMessage,ParsedWireMessage)
			 	VALUES (TRANSACTION_UUID,REFERENCE_ID,IMAD,OMAD,BENEFICIARY,PARSED_AMOUNT,CAST(CURRENT_TIMESTAMP as TIMESTAMP),TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,WIRE_MESSAGE,PARSED_MESSAGE);
				
				SET OutputRoot.BLOB.BLOB = WIRE_BLOB ;
			 	UPDATE Database.dbo.FEDOrigWire AS SP SET Status = TRANSACTION_STATUS_SUCCESS , Description = TRANSACTION_DESCRIPTION_SUCCESS WHERE SP.ID = TRANSACTION_UUID ;
				
				--- firing the exceptional conditional handling
				--- generate new uuid 
				SET TRANSACTION_UUID = UUIDASCHAR ;
				INSERT INTO Database.dbo.FEDExceptions (ID,Message,Reason,DateCreated) 
				VALUES (TRANSACTION_UUID, WIRE_MESSAGE , 'Outbound Wire Originated from Fedlink instead of T24', CAST(CURRENT_TIMESTAMP as TIMESTAMP));
				
			END IF ; 
		
		ELSE 
			-- logic to process non-wire's messages to copy them to seperate table and forward to FRB
			SET TRANSACTION_UUID= UUIDASCHAR;
			INSERT INTO Database.dbo.FEDOrigNonWire (ID,Message,DateCreated)
			 VALUES (TRANSACTION_UUID , WIRE_MESSAGE , CAST(CURRENT_TIMESTAMP as TIMESTAMP));
			SET OutputRoot.BLOB.BLOB = WIRE_BLOB ; 
			
		END IF;
		
		PROPAGATE TO TERMINAL 'out';
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
