BROKER SCHEMA COM.WIRE.FRB.TO.FEDLINK.INCOMING
PATH BANCO_UTILITIES;

DECLARE CACHE SHARED ROW;
DECLARE INITIAL_CODE EXTERNAL INTEGER 2001;
DECLARE FINAL_CODE EXTERNAL INTEGER 2002;

CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;

CREATE COMPUTE MODULE WIRE_FRB_TO_FEDLINK_INCOMING_ESQL_PROCESS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		--variabled needed in this flow 
		
		DECLARE TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS CHARACTER ;
		DECLARE TRANSACTION_UUID,TRANSACTION_EXCEPION_UUID,REFERENCE_ID,PARSED_AMOUNT,RAW_AMOUNT,BENEFICIARY,SELECT_QRY,INSERT_QRY,PARSED_MESSAGE CHARACTER;
		DECLARE WIRE_BLOB,TRANSACTION_ID_BLOB BLOB;
		DECLARE IMAD,OMAD,WIRE_MESSAGE,DUMMY CHARACTER;
		DECLARE TRANSACTION_IDS ROW ;
		DECLARE RECOGNIZED_WIRE_FLAG BOOLEAN ; 
		
		CALL INITIALIZECACHE();
		
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],INITIAL_CODE,TRANSACTION_STATUS,TRANSACTION_DESCRIPTION);
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],FINAL_CODE,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS);
		
		/*	
		SET TRANSACTION_STATUS = 'PICKED FROM FRB';
		SET TRANSACTION_DESCRIPTION= 'INCOMING WIRE IS ACCEPTED FROM FRB';
		SET TRANSACTION_STATUS_SUCCESS = 'POSTED TO FEDLINK' ;
		SET TRANSACTION_DESCRIPTION_SUCCESS = 'INCOMING WIRE IS SUCCESSFULLY SENT TO FEDLINK'; 
		*/
		SET WIRE_BLOB = InputRoot.BLOB.BLOB ; 
		SET WIRE_MESSAGE = CAST( WIRE_BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId Encoding InputRoot.Properties.Encoding);
		
		
		
		--SET DUMMY = CACHE.WIRECODES[1].WireCode;
		
		-- Retrieving / generating the required values from the wire message 
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'3320','*{',REFERENCE_ID);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'2000','{',RAW_AMOUNT);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'4200','{',BENEFICIARY);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1520','{',IMAD);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1120','{',OMAD);
		CALL AMOUNT_FORMATTER(RAW_AMOUNT, PARSED_AMOUNT);
		
		CALL GET_PARSED_WIRE_MESSAGE(WIRE_MESSAGE ,RAW_AMOUNT,PARSED_AMOUNT, CACHE.WIRECODES[1] , PARSED_MESSAGE);
		
		SET TRANSACTION_UUID = NULL ;
		-- business rules / error handling --
		DECLARE OMAD_LEN INTEGER LENGTH(OMAD) ; 
		DECLARE IMAD_LEN INTEGER LENGTH(IMAD) ; 
		
		IF OMAD_LEN > 0 AND IMAD_LEN > 0 THEN 
			SET TRANSACTION_IDS.TRANSACTION  = THE (SELECT A.ID  FROM Database.dbo.FEDAdvice AS A WHERE A.IMAD = IMAD AND A.OMAD = OMAD AND A.DuplicateWireFlag = FALSE);
			SET TRANSACTION_ID_BLOB = TRANSACTION_IDS.TRANSACTION[1].ID;
		END IF ;
				
		-- persisting the values to DB 
		SET TRANSACTION_UUID = UUIDASCHAR ;
		SET OutputRoot.BLOB.BLOB = WIRE_BLOB ;		
			
		IF TRANSACTION_ID_BLOB IS NULL THEN 
			
			INSERT INTO Database.dbo.FEDAdvice ( ID,Amount,DateCreated,Beneficiary,Status,Description,WireMessage,ParsedWireMessage,IMAD,OMAD,DuplicateWireFlag)
			 VALUES (TRANSACTION_UUID,PARSED_AMOUNT,CAST(CURRENT_TIMESTAMP as TIMESTAMP),BENEFICIARY,TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,WIRE_MESSAGE,PARSED_MESSAGE,IMAD,OMAD,FALSE);
			
		ELSE
			-- not a very rare item to happen during test we noticed this to happen 
			 
			INSERT INTO Database.dbo.FEDAdvice ( ID,ReferenceID,Amount,DateCreated,Beneficiary,Status,Description,WireMessage,ParsedWireMessage,IMAD,OMAD,DuplicateWireFlag)
			 VALUES (TRANSACTION_UUID,REFERENCE_ID,PARSED_AMOUNT,CAST(CURRENT_TIMESTAMP as TIMESTAMP),BENEFICIARY,TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,WIRE_MESSAGE,PARSED_MESSAGE,IMAD,OMAD,TRUE);
			
			SET TRANSACTION_EXCEPION_UUID = UUIDASCHAR;
			INSERT INTO Database.dbo.FEDExceptions (ID,Message,Reason,DateCreated ) VALUES (TRANSACTION_EXCEPION_UUID,WIRE_MESSAGE,'Duplicate Advice received from FRB',CAST(CURRENT_TIMESTAMP as TIMESTAMP) );
			
		END IF ;
		
		-- immediately update the database with relevant status after posting to downstream 
			 
		UPDATE Database.dbo.FEDAdvice AS SP SET Status = TRANSACTION_STATUS_SUCCESS , Description = TRANSACTION_DESCRIPTION_SUCCESS WHERE SP.ID = TRANSACTION_UUID ;
			
		
		PROPAGATE TO TERMINAL 'out';
		RETURN FALSE;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

CREATE PROCEDURE CopyEntireMessage() 
BEGIN
		SET OutputRoot = InputRoot;
END;

END MODULE;

