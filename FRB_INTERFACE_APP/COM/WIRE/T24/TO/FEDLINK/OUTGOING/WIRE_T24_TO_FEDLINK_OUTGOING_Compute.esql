/*
Author 		  : Intiaz Shaik

Description   : This esql will receive  the outgoing wire from T24 and post to Fedlink
			  	A new row will be created in FedOrigWire from the information provided in the xml
				if the wire sent from T24 is already existing this would be flagged as exception in DB
				
Last Modified : 08/14/2018

Enhancement List : 
------------------

Fix List : 
----------  

*/

BROKER SCHEMA COM.WIRE.T24.TO.FEDLINK.OUTGOING

PATH BANCO_UTILITIES;
DECLARE ns NAMESPACE 'http://www.temenos.com/T24/event/T24ToFedLink/ToFedLink';

DECLARE CACHE SHARED ROW;
DECLARE INITIAL_CODE EXTERNAL INTEGER 1001;
DECLARE FINAL_CODE EXTERNAL INTEGER 1002;

CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;


CREATE COMPUTE MODULE WIRE_T24_TO_FEDLINK_OUTGOING_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		DECLARE TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS CHARACTER ;
		DECLARE REFERENCE_ID,PARSED_MESSAGE,RAW_AMOUNT,PARSED_AMOUNT CHARACTER;
		DECLARE T24_XML_MESSAGE,AUDIT_UUID CHARACTER;
		DECLARE WIRE_BLOB BLOB;
		DECLARE TRANSACTION_UUID_BLOB,T24_XML_BLOB BLOB ;
		DECLARE IMAD,OMAD,WIRE_MESSAGE,TRANSACTION_UUID,BENEFICIARY CHARACTER;
		DECLARE TRANSACTION_IDS ROW ;
		DECLARE RECOGNIZED_WIRE_FLAG BOOLEAN ; 
			
		
		CALL INITIALIZECACHE();
		
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],INITIAL_CODE,TRANSACTION_STATUS,TRANSACTION_DESCRIPTION);
		CALL GET_STATUS_CODE_DESCRIPTION(CACHE.STATUSCODES[1],FINAL_CODE,TRANSACTION_STATUS_SUCCESS,TRANSACTION_DESCRIPTION_SUCCESS);

/*		
		SET TRANSACTION_STATUS = 'PICKED FROM T24';
		SET TRANSACTION_DESCRIPTION= 'OUTGOING WIRE IS PICKED FROM T24 ADAPTER';
		SET TRANSACTION_STATUS_SUCCESS = 'POSTED TO FEDLINK' ;
		SET TRANSACTION_DESCRIPTION_SUCCESS = 'OUTGOING WIRE IS SUCCESSFULLY SENT TO FEDLINK QUEUE'; 
	*/	
		SET T24_XML_MESSAGE = InputRoot.XMLNSC;
		SET WIRE_MESSAGE = InputRoot.XMLNSC.ns:ToFedLink.ns:fedMessageWhole ;
		SET WIRE_BLOB = CAST (WIRE_MESSAGE AS BLOB CCSID InputRoot.Properties.CodedCharSetId);
		
		
		
		-- Retrieving / generating the required values from the wire message 
		
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'3320','*{',REFERENCE_ID);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1520','{',IMAD);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'1120','{',OMAD);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'2000','{',RAW_AMOUNT);
		CALL GET_CODE_VALUE_FROM_WIRE(WIRE_MESSAGE,'4200','{',BENEFICIARY);
		CALL AMOUNT_FORMATTER(RAW_AMOUNT, PARSED_AMOUNT);
		SET T24_XML_BLOB = ASBITSTREAM(InputRoot.XMLNSC.ns:ToFedLink,InputRoot.Properties.Encoding,
									  InputRoot.Properties.CodedCharSetId,'','','',FolderBitStream);
		SET T24_XML_MESSAGE = CAST(T24_XML_BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.MQMD.Encoding);
			
		CALL GET_PARSED_WIRE_MESSAGE(WIRE_MESSAGE ,RAW_AMOUNT,PARSED_AMOUNT, CACHE.WIRECODES[1] , PARSED_MESSAGE);
		
		
		-- business rules / error handling --
		-- identifying the match using the reference id for outgoing wires
		
		SET TRANSACTION_IDS.TRANSACTION  = THE (SELECT A.ID  FROM Database.dbo.FEDOrigWire AS A WHERE A.ReferenceID = REFERENCE_ID);
		SET TRANSACTION_UUID_BLOB =  TRANSACTION_IDS.TRANSACTION[1].ID ;   
			
		-- persisting the values to DB 
		-- if the wire is not found then insert the record with information received from T24
		SET OutputRoot.BLOB.BLOB = WIRE_BLOB ;
			
		IF TRANSACTION_UUID_BLOB IS NULL THEN
			-- create a new entry to the DB with the details of incoming wire 
			SET TRANSACTION_UUID=UUIDASCHAR; 
			
			INSERT INTO Database.dbo.FEDOrigWire (ID,ReferenceID,IMAD,OMAD,Beneficiary,Amount,DateCreated,Status,Description,WireMessage,ParsedWireMessage,T24XMLMessage)
			VALUES (TRANSACTION_UUID,REFERENCE_ID,IMAD,OMAD,BENEFICIARY,PARSED_AMOUNT,CAST(CURRENT_TIMESTAMP as TIMESTAMP),TRANSACTION_STATUS,TRANSACTION_DESCRIPTION,WIRE_MESSAGE,PARSED_MESSAGE,T24_XML_MESSAGE);
				
			UPDATE Database.dbo.FEDOrigWire AS SP SET Status = TRANSACTION_STATUS_SUCCESS , Description = TRANSACTION_DESCRIPTION_SUCCESS WHERE SP.ID = TRANSACTION_UUID ;
				
		ELSE 
			-- this is an exceptional scenario to be recorded in audit and exception table 
			SET AUDIT_UUID = UUIDASCHAR;
			INSERT INTO Database.dbo.FEDOrigWireAudit (AuditID,FEDID,WireMessage,T24XMLMessage,Status,Description,DateCreated ) 
			VALUES (AUDIT_UUID,TRANSACTION_UUID_BLOB,WIRE_MESSAGE,T24_XML_MESSAGE,TRANSACTION_DESCRIPTION_SUCCESS,'Duplicate Wire Found , still sent to Fedlink',CAST(CURRENT_TIMESTAMP as TIMESTAMP));
			
			-- exception situation update in the DB
			
			SET TRANSACTION_UUID = UUIDASCHAR ;
			INSERT INTO Database.dbo.FEDExceptions (ID,Message,Reason,DateCreated) 
			VALUES (TRANSACTION_UUID, T24_XML_MESSAGE ,'Outbound Wire Originated from T24 is already existing (Duplicate)', CAST(CURRENT_TIMESTAMP as TIMESTAMP));
			
		END IF; 
				
		PROPAGATE TO TERMINAL 'out';

		RETURN FALSE;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
