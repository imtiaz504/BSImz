BROKER SCHEMA COM.STATEMENT.RECONCILE

PATH BANCO_UTILITIES ;
DECLARE CACHE SHARED ROW;

CREATE PROCEDURE INITIALIZECACHE( )
BEGIN
	IF CACHE.WIRECODES.WireCode IS NULL THEN
		SET CACHE.WIRECODES[]= SELECT A.WireCode , A.Description  FROM Database.dbo.FEDWireTags AS A;
	END IF;
	
	IF CACHE.PROPERTIES.Property IS NULL THEN
		SET CACHE.PROPERTIES[]= SELECT A.Property , A.Value  FROM Database.dbo.FEDProperties AS A;
	END IF ;
	
	IF CACHE.STATUSCODES.ID IS NULL THEN
		SET CACHE.STATUSCODES[]= SELECT A.ID , A.Status, A.Description  FROM Database.dbo.FEDStatusCodes AS A;
	END IF ;
	
END;


CREATE COMPUTE MODULE STATEMENT_RECONCILE_FLOW_ESQL_PROCESS_2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		DECLARE DIR,FILE_CREDIT,FILE_DEBIT,STMT_DATE,FILE_CREDIT_CONTENT,FILE_DEBIT_CONTENT CHARACTER;
		DECLARE IMAD,WIRE_MESSAGE CHARACTER;
		DECLARE PAGECOUNT, STMTLINECOUNT INTEGER;
		DECLARE FILE_CREDIT_CONTENT_BLOB , FILE_DEBIT_CONTENT_BLOB BLOB;
		DECLARE PAGEREF REFERENCE TO InputRoot.DFDL.Fed_Stmt.PAGES ;
		DECLARE RESULT_SET ROW;
		
		CALL INITIALIZECACHE();	
		SET FILE_CREDIT_CONTENT='';
		SET FILE_DEBIT_CONTENT='';
		
		SET STMT_DATE=REPLACE(InputRoot.DFDL.Fed_Stmt.PAGES[1].HDG2."CLOSE-DATE",'/','');
		SET STMT_DATE=  SUBSTRING(STMT_DATE FROM 5 FOR 2) ||SUBSTRING(STMT_DATE FROM 1 FOR 4);
		
		CALL GET_FED_PROPERTY_VALUE(CACHE.PROPERTIES[1],'FED_STATEMENT_OUTPUT_FOLDER',DIR);
		SET FILE_CREDIT=STMT_DATE||'R.DAT';
		SET FILE_DEBIT=STMT_DATE||'P.DAT';
		
		
		--SET PAGECOUNT = CARDINALITY(InputRoot.DFDL.Fed_Stmt.PAGES[]);
		--SET STMTLINECOUNT = CARDINALITY(InputRoot.DFDL.Fed_Stmt.PAGES[1]."STMT-LNS"[]);	
		--SET FIRST_IMAD= InputRoot.DFDL.Fed_Stmt.PAGES[1]."STMT-LNS"[1]."IMAD-CYC-DT" || InputRoot.DFDL.Fed_Stmt.PAGES[1]."STMT-LNS"[1]."IMAD-LTERM" || InputRoot.DFDL.Fed_Stmt.PAGES[1]."STMT-LNS"[1]."IMAD-SEQ-NR";
		
		DECLARE CRLF CHAR CAST(X'0D0A' AS CHAR CCSID 1208);
		
		WHILE LASTMOVE(PAGEREF) DO
			-- logic to extract the IMADS and post them to files
			DECLARE STMT_LINE_REF REFERENCE TO PAGEREF."STMT-LNS" ;
			DECLARE POS INTEGER;
			
			WHILE LASTMOVE(STMT_LINE_REF) DO
				
				IF (STMT_LINE_REF."DEBIT-OR-CR" = 'D' AND LENGTH(TRIM(STMT_LINE_REF."IMAD-CYC-DT")) > 0) THEN
					
					SET IMAD = CAST(EXTRACT(YEAR FROM CURRENT_DATE) AS CHAR ) || STMT_LINE_REF."IMAD-CYC-DT" || STMT_LINE_REF."IMAD-LTERM" || STMT_LINE_REF."IMAD-SEQ-NR";
					
					SET RESULT_SET.ORIG  = THE (SELECT A.WireMessage  FROM Database.dbo.FEDOrigWire AS A WHERE A.IMAD LIKE IMAD );
					SET WIRE_MESSAGE = RESULT_SET.ORIG[1].WireMessage;
					
					IF (LENGTH(WIRE_MESSAGE) > 0)  THEN
						SET POS = POSITION('XFT' IN WIRE_MESSAGE);
						SET WIRE_MESSAGE = SUBSTRING(WIRE_MESSAGE FROM POS);
						SET WIRE_MESSAGE=REPLACE(WIRE_MESSAGE,CRLF,'');
						SET FILE_DEBIT_CONTENT =FILE_DEBIT_CONTENT || WIRE_MESSAGE || CRLF ;
					END IF;
						
					
				ELSEIF (STMT_LINE_REF."DEBIT-OR-CR" = 'C' AND LENGTH(TRIM(STMT_LINE_REF."IMAD-CYC-DT")) > 0) THEN
					SET IMAD = CAST(EXTRACT(YEAR FROM CURRENT_DATE) AS CHAR ) || STMT_LINE_REF."IMAD-CYC-DT" || STMT_LINE_REF."IMAD-LTERM" || STMT_LINE_REF."IMAD-SEQ-NR";
					SET RESULT_SET.ADVC  = THE (SELECT A.WireMessage  FROM Database.dbo.FEDAdvice AS A WHERE A.IMAD LIKE IMAD );
					SET WIRE_MESSAGE = RESULT_SET.ADVC[1].WireMessage;
					
					IF (LENGTH(WIRE_MESSAGE) > 0)  THEN
						SET POS = POSITION('{' IN WIRE_MESSAGE);
						SET WIRE_MESSAGE = SUBSTRING(WIRE_MESSAGE FROM POS);
						SET WIRE_MESSAGE=REPLACE(WIRE_MESSAGE,CRLF,'');
						SET FILE_CREDIT_CONTENT =FILE_CREDIT_CONTENT || WIRE_MESSAGE || CRLF ;
					END IF;
					 
				END IF ;
				
				MOVE STMT_LINE_REF NEXTSIBLING NAME 'STMT-LNS';
				
			END WHILE;
			
			MOVE PAGEREF NEXTSIBLING NAME 'PAGES'; 
			
		END WHILE;
		
		SET FILE_CREDIT_CONTENT=TRIM(FILE_CREDIT_CONTENT);
		SET FILE_DEBIT_CONTENT=TRIM(FILE_DEBIT_CONTENT);
		
		
		IF TRUE THEN
			
			SET InputLocalEnvironment.Destination.File.Directory = DIR; 
			SET InputLocalEnvironment.Destination.File.Name = FILE_CREDIT ;	
			SET FILE_CREDIT_CONTENT_BLOB = CAST(FILE_CREDIT_CONTENT AS BLOB CCSID InputRoot.Properties.CodedCharSetId Encoding InputRoot.Properties.Encoding);
			SET OutputRoot.BLOB.BLOB = FILE_CREDIT_CONTENT_BLOB;
			
			PROPAGATE TO TERMINAL 'out1';
		
		END IF;
		
		IF TRUE THEN
			
			SET InputLocalEnvironment.Destination.File.Directory = DIR; 
			SET InputLocalEnvironment.Destination.File.Name = FILE_DEBIT ;	
			SET FILE_DEBIT_CONTENT_BLOB = CAST(FILE_DEBIT_CONTENT AS BLOB CCSID InputRoot.Properties.CodedCharSetId Encoding InputRoot.Properties.Encoding);
			SET OutputRoot.BLOB.BLOB = FILE_DEBIT_CONTENT_BLOB;
			
			PROPAGATE TO TERMINAL 'out2';
		END IF;
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
